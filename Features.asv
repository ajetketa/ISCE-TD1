classdef Features
    properties
        emg;
        noOfMeasurements;
        noOfSamples;
        frequency;
    end

    methods
        function obj = Features(emg, frequency)
            obj.emg = emg;
            obj.noOfMeasurements = datasetSize(1);
            obj.noOfSamples = datasetSize(2);
            obj.frequency = frequency;
        end

        %% Calculate Mean, Variance, Skewness and Kurtosis of the given Dataset
        function [mean, variance, skewness, kurtosis] = getStatisticalFeatures(obj)
            % Statistical Features
            mean = zeros(obj.noOfMeasurements, 1);
            variance = zeros(obj.noOfMeasurements, 1);
            skewness = zeros(obj.noOfMeasurements, 1);
            kurtosis = zeros(obj.noOfMeasurements, 1);

            % Important Helping parameters
            standardDeviation = zeros(obj.noOfMeasurements, 1);
            median = zeros(obj.noOfMeasurements, 1);

            for i = 1:obj.noOfMeasurements
                sum = 0;
                for j = 1:obj.noOfSamples
                    sum = sum + obj.emg(i,j);
                end
                mean(i) = sum / obj.noOfSamples;
                
                sumOfVariance = 0;
                sumOfMeanThird = 0;
                sumOfMeanFourth = 0;
                for j = 1:obj.noOfSamples
                    sumOfVariance = sumOfVariance + (obj.emg(i,j) - mean(i)).^2;
                    sumOfMeanThird = sumOfMeanThird + (obj.emg(i,j) - mean(i)).^3;
                    sumOfMeanFourth = sumOfMeanFourth + (obj.emg(i,j) - mean(i)).^4;
                end
                variance(i) = sumOfVariance / obj.noOfSamples;
                standardDeviation(i) = sqrt(variance(i));
                skewness(i) = sumOfMeanThird / (obj.noOfSamples * standardDeviation(i).^3);
                kurtosis(i) = (sumOfMeanFourth / (obj.noOfSamples * standardDeviation(i).^4)) - 3;
            
                currentSortedEmg = sort(obj.emg(i, :));
                median(i) = (currentSortedEmg(25000) + currentSortedEmg(25001))/2;
            end
        end

        %% Calculate Energy and Root Mean Square
        function [energy, rms] = getTemporalFeatures(obj)
            % Temporal Features
            energy = zeros(obj.noOfMeasurements, 1);
            rms = zeros(obj.noOfMeasurements, 1);

            for i = 1:obj.noOfMeasurements
                sumOfEnergy = 0;
                sumOfSquared = 0;
                for j = 1:obj.noOfSamples
                    sumOfEnergy = sumOfEnergy + abs(obj.emg(i, j)).^2;
                    sumOfSquared = sumOfSquared + obj.emg(i, j).^2;
                end
                energy(i) = sumOfEnergy;
                rms(i) = sqrt(sumOfSquared / obj.noOfSamples);
            end
        end

        %% Spectral Features
        % Moments (power, meanPowerFrequency, skewnessCoefficient, kurtosisCoefficent)
        % Energy By Frequency Band (According to Research the most important ranges of frequencies for emg are: 50Hz - 150Hz)
        % H/L ratio (Low = [50:500], High = [500, 2000])
        function [power, meanPowerFrequency, skewnessCoefficient, kurtosisCoefficient, energyByFrequencyBand, highLowRatio] = getSpectralFeatures(obj)
            % Spectral Features
            power = zeros(obj.noOfMeasurements, 1);
            meanPowerFrequency = zeros(obj.noOfMeasurements, 1);
            skewnessCoefficient = zeros(obj.noOfMeasurements, 1);
            kurtosisCoefficient = zeros(obj.noOfMeasurements, 1);
            energyByFrequencyBand = zeros(obj.noOfMeasurements, 1);
            highLowRatio = zeros(obj.noOfMeasurements, 1);

            for i = 1:obj.noOfMeasurements
                [psd, f] = pwelch(obj.emg(i,:), [], [], [], obj.frequency);
                power(i, 1) = obj.getMoment(psd, f, 0);
                sumOfPsdInFrequencyBand = 0;
                sumOfLow = 0;
                sumOfHigh = 0;
                for index = 1:length(f)
                    if f(index) >= 50 && f(index) <= 150
                        sumOfPsdInFrequencyBand = sumOfPsdInFrequencyBand + psd(index);
                    end

                    if f(index) >= 50 && f(index) <= 500
                        sumOfLow = sumOfLow + psd(index);
                    elseif f(index) >= 500 && f(index) <= 2000
                        sumOfHigh = sumOfHigh + psd(index);
                    end
                end

                energyByFrequencyBand(i, 1) = sumOfPsdInFrequencyBand / power(i, 1);
                highLowRatio(i, 1) = sumOfHigh / sumOfLow;
                meanPowerFrequency(i, 1) = obj.getMoment(psd, f, 1) / power(i, 1);
                skewnessCoefficient(i, 1) = obj.getMoment(psd, f, 3) / sqrt(obj.getMoment(psd, f, 2).^3);
                kurtosisCoefficient(i, 1) = obj.getMoment(psd, f, 4) / obj.getMoment(psd, f, 2).^2;
            end
        end

        % 
        function [noOfPointsIn] = getNoOfPointsWithinSecurityRange(obj, measurement, measurementBySlidingWindow, degreeOfConfidence)
            noOfPointsIn = zeros(obj.noOfMeasurements, 1);
            for i = 1:obj.noOfMeasurements
                upperBound = 0;
                lowerBound = 0;
                if measurement(i,1) + measurement(i, 1) * degreeOfConfidence > measurement(i, 1) - measurement(i, 1) * degreeOfConfidence
                    upperBound = measurement(i,1) + measurement(i, 1) * degreeOfConfidence;
                    lowerBound = measurement(i, 1) - measurement(i, 1) * degreeOfConfidence;
                else
                    upperBound = measurement(i,1) - measurement(i, 1) * degreeOfConfidence;
                    lowerBound = measurement(i, 1) + measurement(i, 1) * degreeOfConfidence;
                end
                for j = 1:length(measurementBySlidingWindow(i, :))
                    if measurementBySlidingWindow(i, j) <=  upperBound && measurementBySlidingWindow(i, j) >= lowerBound
                        noOfPointsIn(i, 1) = noOfPointsIn(i, 1) + 1;
                    end
                end
            end
        end

        %% Calculate Means and Variances based on a sliding window for all of the measurements
        function [means, variance] = getStatisticalFeaturesBySlidingWindow(obj, noOfWindows)
            means = zeros(obj.noOfMeasurements, noOfWindows);
            variance = zeros(obj.noOfMeasurements, noOfWindows);
            noOfElementsPerWindow = round(obj.noOfSamples / noOfWindows);
            for i = 1:obj.noOfMeasurements
                sumOfSection = 0;
                lastIndexMeasured = 0;
                indexToBeInserted = 1;
                for j = 1:obj.noOfSamples
                    sumOfSection = sumOfSection + obj.emg(i, j);
                    if mod(j, noOfElementsPerWindow) == 0
                        means(i, indexToBeInserted) = sumOfSection / noOfElementsPerWindow;
                        variance(i, indexToBeInserted) = obj.calculateVariance(means(i, indexToBeInserted), i, lastIndexMeasured, j);
                        lastIndexMeasured = j;
                        sumOfSection = 0;
                        indexToBeInserted = indexToBeInserted + 1;
                    elseif j == obj.noOfSamples
                        means(i, indexToBeInserted) = sumOfSection / (noOfElementsPerWindow - lastIndexMeasured);
                        variance(i, indexToBeInserted) = obj.calculateVariance(means(i, indexToBeInserted), i, lastIndexMeasured, j);
                    end
                end
            end
        end

        % Util function for finding variance for each of the sliding windows
        function variance = calculateVariance(obj, mean, measurement, startingIndex, endingIndex)
            sumOfVariance = 0;
            for i = startingIndex + 1:endingIndex
                sumOfVariance = sumOfVariance + (obj.emg(measurement, i) - mean).^2;
            end
            variance = sumOfVariance / (endingIndex - startingIndex);
        end

        %% Utils - For Features
        function moment = getMoment(obj, psd, frequency, power)
             moment = 0;
             for i = 1:length(frequency)
                 moment = moment + frequency(i).^power .* psd(i); 
             end
             moment = moment * 2;
        end
    end


end