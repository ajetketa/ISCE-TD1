clear all;
close all;
clc;


%% Defining Constants
frequency = 10000;
noOfMeasurements = 20;

%% Import all the EMG files

emg = [];
for index = 1:noOfMeasurements
    temporaryEMG = load(sprintf('../DatasetTD1/EMG%d.mat',index));
    emg = [emg; temporaryEMG.EMG];
end

features = Features(emg, frequency);

%% Retrieve all extracted features
[mean, variance, skewness, kurtosis] = features.getStatisticalFeatures();
[energy, rms] = features.getTemporalFeatures();
[power, meanPowerFrequency, skewnessCoefficient, kurtosisCoefficient, energyByFrequencyBands, highLowRatio] = features.getSpectralFeatures();
[meansWithSlidingWindow, variancesWithSlidingWindow] = features.getStatisticalFeaturesBySlidingWindow(10);
[noOfSlidingWindowMeansWithinRange] = features.getNoOfPointsWithinSecurityRange(mean, meansWithSlidingWindow, 0.04);
[noOfSlidingWindowVariancesWithinRange] = features.getNoOfPointsWithinSecurityRange(variance, variancesWithSlidingWindow, 0.04);

measurement = meanPowerFrequency;
measurementLabel = "Mean Power Frequency";

fig=gcf;
fig.Position(3:4)=[1400,400];

tiledlayout(1,3);
nexttile;
plotClassified(measurement, measurementLabel);
nexttile;
DiscriminativePower.buildROC(measurement, measurementLabel);
nexttile;
DiscriminativePower.buildBoxPlot(measurement, measurementLabel);

%% Plot the Points given in a classified manner for better readibility
function plotClassified(measurement, plotTitle)
    for index = 1:length(measurement)
         if index <= 10
             plot(index ,measurement(index), "b.")
         else
             plot(index, measurement(index), "r*")
         end
         hold on
    end
    title(plotTitle + " Plot")
    hold off
end


