classdef DiscriminativePower
    methods (Static)
        %% ROC AND AUC, Accuracy, Sensibility and Sensitivity
        % For each of the measurements we are going to plot ROC and in the meantime we will also calculate Area Under The Curve, Accuracy,
        % Sensibility and Sensitivity. These tools will be useful to better quantify the discriminative power that each one of the features hold.
        
        function [areaUnderTheCurve, accuracy, bestSensitivity, bestSpecificity] = buildROC(measurement, chartTitle)
             accuracy = 0;

             % Confusion matrix will keep log of whether a specific point is or not
             % on a specific class. RateOfTruePositive = Sensitivity,
             % RateOfFalsePositive = 1 - sensitivity

             % For Each of the Measurements an optimal number of thresholds is found
             thresholds = DiscriminativePower.getOptimalThresholds(measurement);
             rateOfTruePositive = zeros(length(thresholds), 1);
             rateOfFalsePositive = zeros(length(thresholds), 1);
        
             % For Every threshold we are going to calculate the rateOfTruePositive, rateOfFalsePositive and threshold  accuracy. 
             % For Each iteration we will try to find the maximum accuracy for the given measurement, as well as the sensitivity and 
             % specificity that make that value possible
             for thresholdIndex = 1:length(thresholds)
                 truePositive = 0;
                 falsePositive = 0;
                 falseNegative = 0;
                 trueNegative = 0;
                 for measurementIndex = 1:length(measurement)
                     if measurement(measurementIndex) >= thresholds(thresholdIndex)
                         if measurementIndex > 10
                             truePositive = truePositive + 1;
                         else
                             falsePositive = falsePositive + 1;
                         end
                     else
                         if measurementIndex > 10
                             falseNegative = falseNegative + 1;
                         else
                             trueNegative = trueNegative + 1;
                         end
                     end
                 end
        
                 rateOfTruePositive(thresholdIndex) = truePositive / (truePositive + falseNegative);
                 rateOfFalsePositive(thresholdIndex) = falsePositive / (falsePositive + trueNegative);
                 thresholdAccuracy = (truePositive + trueNegative) / (truePositive + trueNegative + falsePositive + falseNegative);
                
                 if thresholdAccuracy > accuracy
                     accuracy = thresholdAccuracy;
                     bestSensitivity = rateOfTruePositive(thresholdIndex);
                     bestSpecificity = 1 - rateOfFalsePositive(thresholdIndex);
                 end
             end

             % Calculate the Area Under the Curve and do a plotting of the ROC curve with information related to AUC, accuracy,
             % sensitivity and specificity
             areaUnderTheCurve = DiscriminativePower.getAreaUnderTheCurve(rateOfFalsePositive', rateOfTruePositive');
             plot(rateOfFalsePositive', rateOfTruePositive', "r.-");
             title(chartTitle + " ROC")
             text(0, 0.9, "AUC: " + areaUnderTheCurve);
             text(0, 0.85, "Accuracy: " + accuracy);
             text(0, 0.8, "Sensitivity: " + bestSensitivity);
             text(0, 0.75, "Specificity: " + bestSpecificity);
             ylabel("Rate of True Positive(Sensitivity)");
             xlabel("Rate of False Positive(1 - specificity)");
        end
        
        % Calculate Area Under The Curve (AUC)
        function areaUnderTheCurve = getAreaUnderTheCurve(rateOfFalsePositive, rateOfTruePositive)
            areaUnderTheCurve = 0;
            for point = 1:length(rateOfFalsePositive) - 1
                % No displacement on X-Axis = no Area
                if rateOfFalsePositive(point) ~= rateOfFalsePositive(point + 1)
                    % Conditions for triangle
                    if rateOfTruePositive(point) == 0 && rateOfTruePositive(point + 1) ~= 0
                        areaUnderTheCurve = areaUnderTheCurve + DiscriminativePower.getTriangleArea(rateOfFalsePositive(point + 1) - rateOfFalsePositive(point), rateOfTruePositive(point + 1) - rateOfTruePositive(point));
                    % Conditions for Rectangle
                    elseif rateOfTruePositive(point + 1) == rateOfTruePositive(point)
                        areaUnderTheCurve = areaUnderTheCurve + DiscriminativePower.getRectangleArea(rateOfFalsePositive(point + 1) - rateOfFalsePositive(point), rateOfTruePositive(point));
                    % Conditions for Parallelogram
                    elseif rateOfTruePositive(point) ~= 0 && (rateOfTruePositive(point) ~= rateOfTruePositive(point + 1))
                        areaUnderTheCurve = areaUnderTheCurve + DiscriminativePower.getParallelogramArea(rateOfFalsePositive(point + 1) - rateOfFalsePositive(point), rateOfTruePositive(point), rateOfTruePositive(point + 1));
                    end
                end
            end
            areaUnderTheCurve = -1 * areaUnderTheCurve;
        end
        
        
        function triangleArea = getTriangleArea(deltaX, deltaY)
            c = sqrt(deltaX.^2 + deltaY.^2);
            halfPerimeter = (c + deltaX + deltaY) / 2;
            triangleArea = sqrt(halfPerimeter * (halfPerimeter - c) * (halfPerimeter - deltaY) * (halfPerimeter - deltaX));
        end
        
        function rectangleArea = getRectangleArea(deltaX, y)
            rectangleArea = deltaX * y;
        end
        
        function parallelogramArea = getParallelogramArea(deltaX, y1, y2)
            parallelogramArea = DiscriminativePower.getTriangleArea(deltaX, y2 - y1) + DiscriminativePower.getRectangleArea(deltaX, y1);
        end

        %% BoxPlot
        function buildBoxPlot(measurements, chartTitle)
            classes = ["Class1" "Class1" "Class1" "Class1" "Class1" "Class1" "Class1" "Class1" "Class1" "Class1" "Class2" "Class2" "Class2" "Class2" "Class2" "Class2" "Class2" "Class2" "Class2" "Class2"];
            boxplot(measurements, classes);
            title(chartTitle + " Boxplot");
            ylabel(chartTitle);
        end
        
        %% Utils -- Remove duplicate values to simplify the solutions
        function [thresholds] = getOptimalThresholds(measurement)
            sortedMeasurements = sort(measurement);
            thresholds = [sortedMeasurements(1,1) - 1];
            for i = 1:length(sortedMeasurements)
                if i == 1 || i == length(sortedMeasurements)
                    thresholds = [thresholds; sortedMeasurements(i, 1)]
                else
                    if sortedMeasurements(i, 1) < sortedMeasurements(i+1, 1)
                        thresholds = [thresholds; sortedMeasurements(i, 1)]
                    end
                end
            end
            thresholds = [thresholds; sortedMeasurements(length(sortedMeasurements), 1) + 1];
        end
    end
end
